-- Flyway migration script V4: Create orders and order_items tables

-- Create the orders table
CREATE TABLE orders (
                        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Or BIGINT AUTO_INCREMENT depending on DB
                        customer_id BIGINT NOT NULL,
                        cook_id BIGINT NOT NULL,
                        delivery_agent_id BIGINT, -- Can be NULL initially
                        status VARCHAR(50) NOT NULL,
                        total_amount DECIMAL(10, 2) NOT NULL,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

                        CONSTRAINT fk_order_customer FOREIGN KEY (customer_id) REFERENCES users(id),
                        CONSTRAINT fk_order_cook FOREIGN KEY (cook_id) REFERENCES users(id),
                        CONSTRAINT fk_order_delivery_agent FOREIGN KEY (delivery_agent_id) REFERENCES users(id) -- Assumes delivery agents are also users
);

-- Create the order_items table
CREATE TABLE order_items (
                             id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                             order_id BIGINT NOT NULL,
                             food_item_id BIGINT NOT NULL,
                             quantity INTEGER NOT NULL,
                             price_at_order_time DECIMAL(10, 2) NOT NULL,
                             food_item_name_at_order_time VARCHAR(255) NOT NULL, -- Store the name

                             CONSTRAINT fk_order_item_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE, -- Delete items if order is deleted
                             CONSTRAINT fk_order_item_food FOREIGN KEY (food_item_id) REFERENCES food_items(id) ON DELETE RESTRICT -- Prevent deleting food item if it's in an order? Or SET NULL? RESTRICT is safer initially.
);

-- Optional: Indexes for performance
CREATE INDEX idx_order_customer_id ON orders(customer_id);
CREATE INDEX idx_order_cook_id ON orders(cook_id);
CREATE INDEX idx_order_delivery_agent_id ON orders(delivery_agent_id);
CREATE INDEX idx_order_status ON orders(status);
CREATE INDEX idx_order_item_order_id ON order_items(order_id);
CREATE INDEX idx_order_item_food_item_id ON order_items(food_item_id);

-- Trigger to update updated_at timestamp (Example for PostgreSQL)
-- May not be needed if using @UpdateTimestamp annotation with Hibernate
/*
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_orders_updated_at
BEFORE UPDATE ON orders
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();
*/